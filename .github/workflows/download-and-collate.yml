# T-PEN backup, validation, and test collation pipeline

name: T-PEN backup and collate
on:
  workflow_call:
    inputs:
      forceCollate:
        description: "Whether or not to run the full collation process if no transcriptions changed"
        required: false
        type: boolean
        default: false
      blockOnValidation:
        description: "Whether an invalid TEI file should block the collation step from running"
        required: false
        type: boolean
        default: true
      xml_schema:
        description: "The TEI XML schema to validate against in the validation job"
        required: true
        type: string
      stemmaweb_user:
        description: "The Stemmaweb user ID to upload the tradition for"
        required: true
        type: string
      api_test_base:
        description: "The Stemmarest API endpoint for uploading the data"
        required: true
        type: string
      tradition_name:
        description: "The name of the tradition (today's date will be appended to it)"
        required: true
        type: string
      tradition_lang:
        description: "The language of the tradition text"
        required: true
        type: string
    secrets:
      TPEN_USER:
        required: true
      TPEN_PASS:
        required: true
      API_HTUSER:
        required: false
      API_HTPASS:
        required: false
      SW_PASS:
        required: true

jobs:
  create-tei-files:
    runs-on: [self-hosted, Linux]
    container:
      image: ghcr.io/dhuniwien/edition-tools
    # We want to know whether any relevant Github files changed as a result of this job
    outputs:
      filesChanged: ${{ steps.commitstep.outputs.committed }}
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    - name: Checkout the repo
      uses: actions/checkout@v3
    - name: Fetch files from T-PEN
      run: |
        # Get the config file and add secrets
        sed -e 's/TPENUSER/${{ secrets.TPEN_USER }}/' -e 's/TPENPASS/${{ secrets.TPEN_PASS }}/' backup.yml > /root/tpen/backup.yml
        /root/tpen/backup.py .
    - name: Convert from SC-JSON to TEI XML format
      run: |
        [ -d transcription/merged ] || mkdir transcription/merged
        python3 /root/scripts/merge-json.py transcription/ transcription/merged --verbose
        if [ -f transcription/members.json ]; then
          cp transcription/members.json transcription/merged
        fi
        JSON2XML_ARGS=
        if [ -f transcription/config.py ]; then
          JSON2XML_ARGS="-c transcription/config"
        fi
        [ -d transcription/tei-xml ] || mkdir transcription/tei-xml
        python3 /root/scripts/json2xml.py -v transcription/merged transcription/tei-xml $JSON2XML_ARGS 
        ret=$?
        rm -rf transcription/merged
        exit $ret
    - name: Commit and push all updates
      id: commitstep
      uses: EndBug/add-and-commit@v9
      with:
        add: 'transcription/*.json transcription/tei-xml/*.xml'
        message: 'Daily T-PEN backup automagick'

  validate-tei-xml:
    needs: create-tei-files
    if: ${{ needs.create-tei-files.outputs.filesChanged || inputs.forceCollate }}
    runs-on: [self-hosted, Linux]
    container:
      image: ghcr.io/dhuniwien/edition-tools
    continue-on-error: ${{ !inputs.blockOnValidation }}
    outputs:
      hackContinue: ${{ needs.create-tei-files.outputs.filesChanged || inputs.forceCollate }}
    steps: 
      - uses: actions/checkout@v3
      - name: Validate committed XML files
        if: ${{ needs.create-tei-files.outputs.filesChanged || inputs.forceCollate }}
        run: |
          echo Run conditional evalutes to ${{ needs.create-tei-files.outputs.filesChanged || inputs.forceCollate }}
          verr=0
          if [ ${{ needs.create-tei-files.outputs.filesChanged || inputs.forceCollate }} = true ]; then
            # don't stop if a linter fails, instead make sure
            # all files are checked by swallowing the return value
            #
            for FILE in transcription/tei-xml/*.xml
            do
              echo === $FILE ===
              xmllint --noout --relaxng ${{ inputs.xml_schema }} "$FILE"
              ret=$?
              verr=$((verr + ret))
            done
            if [ $verr -ne 0 ]; then
              echo "Some files failed to validate"
            fi
          fi
          exit $verr
            
  collate-and-upload:
    runs-on: [self-hosted, Linux]
    container:
      image: ghcr.io/dhuniwien/edition-tools
    needs: validate-tei-xml
    steps:
      - uses: actions/checkout@v3
      - name: Tokenize all sections
        run: |
          # Workaround for broken conditional in validation step
          echo Hack conditional evaluates to ${{ needs.validate-tei-xml.outputs.hackContinue }}
          if [ ${{ needs.validate-tei-xml.outputs.hackContinue }} = false ]; then
            exit 0
          fi
          rm -rf tokenfiles && mkdir tokenfiles  # Make sure cruft is cleared out
          python3 /root/scripts/teixml2collatex.py transcription/tei-xml/ tokenfiles -c transcription/config --verbose
      - name: Collate section by section
        run: |
          # Workaround for broken conditional in validation step
          if [ ${{ needs.validate-tei-xml.outputs.hackContinue }} = false ]; then
            exit 0
          fi
          # Construct the base curl command depending on whether we have an API user/password
          CURLCMD='curl --silent'
          if [ -n ${{ secrets.API_HTUSER }} ]; then
            CURLCMD="${CURLCMD} --user ${{ secrets.API_HTUSER }}"
            if [ -n ${{ secrets.API_HTPASS }} ]; then
              CURLCMD="${CURLCMD}:${{ secrets.API_HTPASS }}"
            fi
          fi
          # PUT new user on test server
          $CURLCMD \
              --request PUT \
              --header "Content-Type: application/json" \
              --data '{ "role":"user", "id":"${{inputs.stemmaweb_user}}", "email":"${{inputs.stemmaweb_user}}", "passphrase":"${{secrets.SW_PASS}}"}' \
          ${{inputs.api_test_base}}/user/${{inputs.stemmaweb_user}}
          if [ $? -ne 0 ]; then
              exit $?
          fi

          # Make the new empty tradition
          $CURLCMD \
              --request POST \
              --form "name=${{inputs.tradition_name}} $(date "+%Y-%m-%d")" \
              --form "language=${{inputs.tradition_lang}}" \
              --form "public=no" \
              --form "userId=${{inputs.stemmaweb_user}}" \
              --form "empty=no" \
          ${{inputs.api_test_base}}/tradition > create-tradition.response
          TRADITION_ID=`jq ".tradId" create-tradition.response | sed s/\"//g`
          if [ -z $TRADITION_ID ]; then
              exit 1
          fi
          export TRADITION_ID

          SECTION_ID=''

          # Go through each milestone, collate it, and upload it
          echo "Collating and uploading milestones ..."
          rm -rf collations && mkdir collations  # Make sure cruft is cleared out
          for IN_FILE in tokenfiles/milestone-*.json
          do
              NAME=${IN_FILE##*/}  # strip directory
              NAME=${NAME%.*}      # strip file ext.

              OUT_FILE_JSON=collations/$NAME.json
              CMD_TIMEOUT="timeout 1000 "

              # run the collation
              CMD_COLLATE_JSON="java -jar /root/collatex.jar --tokenized --format json $IN_FILE --output $OUT_FILE_JSON"

              echo `date -R`: $CMD_COLLATE_JSON
              # $CMD_TIMEOUT $CMD_COLLATE_JSON
              $CMD_COLLATE_JSON

              # upload it to the server
              SECTION_ID_PREV=${SECTION_ID}
              SECTION_ID=''

              CMD_CURL="$CURLCMD --request POST"
              CMD_CURL="${CMD_CURL} --form name=${NAME}"
              CMD_CURL="${CMD_CURL} --form file=@${OUT_FILE_JSON}"
              CMD_CURL="${CMD_CURL} --form filetype=cxjson"
              CMD_CURL="${CMD_CURL} ${{inputs.api_test_base}}/tradition/${TRADITION_ID}/section"
              echo $CMD_CURL

              # Abort if we get five gateway errors in a row
              SUCCESS=
              for i in {1..5}; do
                  echo -n "`date -R`: Attempt $i: "
                  $CMD_CURL > create-section.response
                  if grep -q "50.*Gateway" create-section.response
                  then
                      echo Gateway error $i/5
                  else
                      cat create-section.response; echo
                      SUCCESS=true
                      break
                  fi
              done
              if [ -z $SUCCESS ]
              then
                  echo "Too many gateway errors in a row; bailing out"
                  exit 1
              fi

              SECTION_ID=`jq ".parentId" create-section.response | sed s/\"//g`
          done
