---
resources:
    # already fetched into git by cronjob at storage
    #
    - name: tpen-data
      type: git
      source:
        uri: {{tpen-data-uri}}
        branch: {{tpen-data-branch}}
        paths: [transcription]
        private_key: {{DHUniWienMU-priv-key}}

    - name: moe-data
      type: git
      source:
        uri: {{moe-data-uri}}
        branch: {{moe-data-branch}}
        paths: [ci/resources]

    #- name: version
    #  type: semver
    #  source:
    #    driver: git
    #    uri: {{version-uri}}
    #    branch: {{version-branch}}
    #    file: {{version-file}}
    #    initial_version: "0.0.0"
    #    private_key: {{DHUniWienMU-priv-key}}

    - name: ssh-keys
      type: git
      source:
        uri: {{ssh-keys-uri}}
        private_key: {{DHUniWienMU-priv-key}}


jobs:

    - name: tpen2tei
      plan:
        - aggregate:
          - get: tpen-data
            trigger: true
          - get: ssh-keys
          - get: moe-data

        - task: task-tpen2tei

          config:
            platform: linux
            image_resource:
              type: docker-image
              source:
                repository: {{tools-image}}
                insecure_registries: [ {{insecure-registries}} ]

            inputs:
              - name: tpen-data
              - name: moe-data
              - name: ssh-keys
            outputs:
              - name: tei-xml
              - name: tpen-data-bumped

            run:
              path: sh
              args:
                - -exc
                - |
                  chmod 600 ssh-keys/github/DHUniWienMU-id_rsa
                  export GIT_SSH_COMMAND="ssh -o StrictHostKeyChecking=no -i ssh-keys/github/DHUniWienMU-id_rsa"

                  git clone {{tpen-data-uri}} tpen-data-bumped

                  cd tpen-data-bumped

                  ### use merged files
                  [ -d transcription/merged ] || mkdir transcription/merged/
                  python3 ../moe-data/ci/resources/merge-json.py transcription/ transcription/merged

                  ### create TEI-XML
                  [ -d transcription/tei-xml ] || mkdir transcription/tei-xml/
                  python3 ../moe-data/ci/resources/json2xml.py transcription/merged transcription/tei-xml/

                  # ### use files as they come from T-PEN
                  # [ -d transcription/tei-xml ] || mkdir transcription/tei-xml/
                  # python3 ../moe-data/ci/resources/json2xml.py transcription/ transcription/tei-xml/

                  git config --global user.email "DHUniWienMU@foo.bar"
                  git config --global user.name "DHUniWienMU"

                  cd transcription/tei-xml/
                  git add *xml

                  GIT_STATUS=`git status`

                  if echo $GIT_STATUS | grep -q "Changes to be committed:" -;
                  then
                      git commit -m "tpen2tei" *xml
                  fi

        - put: tpen-data
          params: {repository: tpen-data-bumped}

    - name: validate-tei-xml
      plan:
        - get: tpen-data
          trigger: true
          passed: [tpen2tei]

        - task: task-validate-tei-xml

          config:
            platform: linux
            image_resource:
              type: docker-image
              source:
                repository: {{tools-image}}
                insecure_registries: [ {{insecure-registries}} ]

            inputs:
              - name: tpen-data

            run:
              path: sh
              args:
                - -exc
                - |
                  SAVEIFS=$IFS
                  IFS=$(echo -en "\n\b")

                  # for now: don't care if a linter fails instead make sure
                  # all files are checked by swallowing the return value
                  #
                  sh -c '
                      for FILE in tpen-data/transcription/tei-xml/*xml
                      do
                          # xmlwf "$FILE" && \
                          xmllint --noout --relaxng "{{relaxng_schema}}" "$FILE"
                      done
                  '

                  IFS=$SAVEIFS
                  exit 0

    - name: collate
      plan:
        - aggregate:
          - get: tpen-data
            trigger: true
            passed: [validate-tei-xml]
          - get: moe-data
          - get: ssh-keys

        - task: task-collate

          config:
            platform: linux
            image_resource:
              type: docker-image
              source:
                repository: {{tools-image}}
                insecure_registries: [ {{insecure-registries}} ]

            inputs:
              - name: tpen-data
              - name: moe-data
              - name: ssh-keys
            outputs:
              - name: collatex
              - name: collatex-out
              - name: collatex-out-svg
              - name: collatex-out-pretty

            run:
              path: sh
              args:
                - -exc
                - |
                  echo "rearrange data for collatex ..."
                  python3 moe-data/ci/resources/teixml2collatex.py tpen-data/transcription/tei-xml/ collatex

                  echo "install graphviz (graphviz is not yet part of the tools image) ..."
                  apk add graphviz

                  SAVEIFS=$IFS
                  IFS=$(echo -en "\n\b")

                  echo "running collatex ..."
                  sh -c '
                      for IN_FILE in collatex/milestone-*.json
                      do
                          NAME=${IN_FILE##*/}  # strip directory
                          NAME=${NAME%.*}      # strip file ext.

                          ### OUT_FILE_JSON=collatex-out/$NAME.json
                          OUT_FILE_DOT=collatex-out/$NAME.dot
                          SVG_FILE=collatex-out-svg/$NAME.svg

                          ### # json will be bautified later
                          ### CMD_COLLATE_JSON="java -jar /root/collatex.jar --tokenized --format json $IN_FILE --output $OUT_FILE_JSON"

                          # dot2svg
                          CMD_COLLATE_DOT="java -jar /root/collatex.jar --tokenized --format dot $IN_FILE --output $OUT_FILE_DOT"
                          CMD_SVG="dot -Grankdir=LR -Tsvg $OUT_FILE_DOT -o $SVG_FILE"

                          ### echo `date -R`: $CMD_COLLATE_JSON
                          ### $CMD_COLLATE_JSON

                          echo `date -R`: $CMD_COLLATE_DOT
                          $CMD_COLLATE_DOT

                          echo `date -R`: $CMD_SVG
                          $CMD_SVG
                      done

                      echo `date -R` done
                  '

                  echo "pretty print collatex's output ..."
                  python3 moe-data/ci/resources/beautify-json.py collatex-out/ collatex-out-pretty/

                  echo `date -R` done

                  IFS=$SAVEIFS
                  exit 0

        - task: task-copy

          config:
            platform: linux
            image_resource:
              type: docker-image
              source:
                repository: {{tools-image}}
                insecure_registries: [ {{insecure-registries}} ]

            inputs:
              - name: ssh-keys
              - name: collatex-out-svg

            run:
              path: sh
              args:
                - -exc
                - |
                  SSH_KEYS_DIR=ssh-keys
                  /bin/chmod 600 ${SSH_KEYS_DIR}/storage/ci-id_rsa

                  SCP="/usr/bin/scp \
                      -o StrictHostKeyChecking=no \
                      -i ${SSH_KEYS_DIR}/storage/ci-id_rsa"

                  $SCP -r collatex-out-svg/ ci@storage.stemmaweb.net:/home/ci/www/moe-data/

                  echo "SVG files copied to webspace, visit https://www.ci.stemmaweb.net/moe-data/"
                  echo "Authentication is required, contact someone about that."
                  echo "Bye, bye ;-)"
