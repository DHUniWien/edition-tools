---
resources:
    # multiple resources pointing to the same
    # repository are suffixed with the producer of new content

    - name: tpen-data-tpen-backup
      type: git
      source:
        uri: {{tpen-data-uri}}
        branch: {{tpen-data-branch}}
        paths: [transcription]
        ignore_paths: [transcription/tei-xml, collation]
        private_key: {{DHUniWienMU-priv-key}}

    - name: tpen-data-tpen2tei
      type: git
      source:
        uri: {{tpen-data-uri}}
        branch: {{tpen-data-branch}}
        paths: [transcription/tei-xml]
        private_key: {{DHUniWienMU-priv-key}}

    - name: tpen-data-collate
      type: git
      source:
        uri: {{tpen-data-uri}}
        branch: {{tpen-data-branch}}
        paths: [collation]
        private_key: {{DHUniWienMU-priv-key}}

    - name: moe-data
      type: git
      source:
        uri: {{moe-data-uri}}
        branch: {{moe-data-branch}}
        paths: [ci/resources]

    - name: ssh-keys
      type: git
      source:
        uri: {{ssh-keys-uri}}
        private_key: {{DHUniWienMU-priv-key}}

    - name: netrc-test-api
      type: git
      source:
        uri: {{netrc-test-api-uri}}
        private_key: {{DHUniWienMU-priv-key}}

    - name: daily
      type: time
      source:
        start: 6:00 AM
        stop: 12:00 PM


jobs:

    - name: tpen-backup
      plan:
        - aggregate:
          - get: daily
            trigger: true
          - get: tpen-data-tpen-backup

        - task: task-tpen-backup

          config:
            platform: linux
            image_resource:
              type: docker-image
              source:
                repository: {{tools-image}}
                insecure_registries: [ {{insecure-registries}} ]

            inputs:
              - name: tpen-data-tpen-backup
            outputs:
              - name: do-backup
            run:
              path: sh
              args:
                - -exc
                - |
                  # NO IDEA why this is necessary, but otherwise the source
                  # repo is in detached-head state...
                  (cd tpen-data-tpen-backup && git checkout master)
                  git clone tpen-data-tpen-backup do-backup
                  /root/tpen/backup.py do-backup
                  git config --global user.name "tools/tpen-backup"
                  git config --global user.email "ci@dh.gesch.univie.ac.at"
                  cd do-backup && git add transcription/*.json
                  git commit -m "T-PEN backup automagick"

        - put: tpen-data-tpen-backup
          params:
            repository: do-backup

    - name: tpen2tei
      plan:
        - aggregate:
          - get: tpen-data-tpen-backup
            trigger: true
            passed: [tpen-backup]
          - get: moe-data

        - task: task-tpen2tei

          config:
            platform: linux
            image_resource:
              type: docker-image
              source:
                repository: {{tools-image}}
                insecure_registries: [ {{insecure-registries}} ]

            inputs:
              - name: moe-data
              - name: tpen-data-tpen-backup
            outputs:
              - name: tei-xml
              - name: tpen-data-bumped

            run:
              path: sh
              args:
                - -exc
                - |
                  (cd tpen-data-tpen-backup && git checkout master)
                  git clone tpen-data-tpen-backup tpen-data-bumped

                  cd tpen-data-bumped

                  ### use merged files
                  [ -d transcription/merged ] || mkdir transcription/merged/
                  python3 ../moe-data/ci/resources/merge-json.py transcription/ transcription/merged --verbose

                  ### create TEI-XML
                  [ -d transcription/tei-xml ] || mkdir transcription/tei-xml/
                  python3 ../moe-data/ci/resources/json2xml.py transcription/merged transcription/tei-xml/ -c transcription/config

                  # ### use files as they come from T-PEN
                  # [ -d transcription/tei-xml ] || mkdir transcription/tei-xml/
                  # python3 ../moe-data/ci/resources/json2xml.py transcription/ transcription/tei-xml/

                  git config --global user.email "ci@dh.gesch.univie.ac.at"
                  git config --global user.name "moe-data/tpen2tei"

                  cd transcription/tei-xml/
                  git add *xml

                  GIT_STATUS=`git status`

                  if echo $GIT_STATUS | grep -q "Changes to be committed:" -;
                  then
                      git commit -m "tpen2tei" *xml
                  fi

        - put: tpen-data-tpen2tei
          params: {repository: tpen-data-bumped}

    - name: validate-tei-xml
      plan:
        - get: tpen-data-tpen2tei
          trigger: true
          passed: [tpen2tei]

        - task: task-validate-tei-xml
          input_mapping: { tpen-data: tpen-data-tpen2tei }

          config:
            platform: linux
            image_resource:
              type: docker-image
              source:
                repository: {{tools-image}}
                insecure_registries: [ {{insecure-registries}} ]

            inputs:
              - name: tpen-data

            run:
              path: sh
              args:
                - -exc
                - |
                  SAVEIFS=$IFS
                  IFS=$(echo -en "\n\b")

                  # for now: don't care if a linter fails instead make sure
                  # all files are checked by swallowing the return value
                  #
                  sh -c '
                      for FILE in tpen-data/transcription/tei-xml/*xml
                      do
                          # xmlwf "$FILE" && \
                          xmllint --noout --relaxng "{{relaxng_schema}}" "$FILE"
                      done
                      exit 0
                  '

                  IFS=$SAVEIFS
                  exit 0

    - name: collate
      plan:
        - aggregate:
          - get: tpen-data-tpen2tei
            trigger: true
            passed: [validate-tei-xml]
          - get: moe-data
          - get: ssh-keys

        - task: task-collate
          input_mapping: { tpen-data: tpen-data-tpen2tei }

          config:
            platform: linux
            image_resource:
              type: docker-image
              source:
                repository: {{tools-image}}
                insecure_registries: [ {{insecure-registries}} ]

            inputs:
              - name: tpen-data
              - name: moe-data
            outputs:
              - name: collatex
              - name: collatex-out
              - name: collatex-out-svg
              - name: collatex-out-pretty

            run:
              path: sh
              args:
                - -exc
                - |
                  echo "rearrange data for collatex ..."
                  python3 moe-data/ci/resources/teixml2collatex.py tpen-data/transcription/tei-xml/ collatex -c tpen-data/transcription/config --verbose

                  SAVEIFS=$IFS
                  IFS=$(echo -en "\n\b")

                  echo "running collatex ..."
                  sh -c '
                      for IN_FILE in collatex/milestone-*.json
                      do
                          NAME=${IN_FILE##*/}  # strip directory
                          NAME=${NAME%.*}      # strip file ext.

                          OUT_FILE_JSON=collatex-out/$NAME.json
                          OUT_FILE_DOT=collatex-out/$NAME.dot
                          SVG_FILE=collatex-out-svg/$NAME.svg

                          CMD_TIMEOUT="timeout -t 1000 "

                          # json will be beautified later
                          CMD_COLLATE_JSON="java -jar /root/collatex.jar --tokenized --format json $IN_FILE --output $OUT_FILE_JSON"

                          # dot2svg
                          CMD_COLLATE_DOT="java -jar /root/collatex.jar --tokenized --format dot $IN_FILE --output $OUT_FILE_DOT"
                          CMD_SVG="dot -Grankdir=LR -Tsvg $OUT_FILE_DOT -o $SVG_FILE"

                          echo `date -R`: $CMD_COLLATE_JSON
                          $CMD_TIMEOUT $CMD_COLLATE_JSON

                          echo `date -R`: $CMD_COLLATE_DOT
                          $CMD_TIMEOUT $CMD_COLLATE_DOT

                          echo `date -R`: $CMD_SVG
                          $CMD_TIMEOUT $CMD_SVG
                      done
                  '

                  echo `date -R` done

                  echo "pretty print collatex's output ..."
                  python3 moe-data/ci/resources/beautify-json.py collatex-out/ collatex-out-pretty/

                  echo `date -R` done

                  IFS=$SAVEIFS

        - task: task-collatex-to-github
          input_mapping: { tpen-data: tpen-data-tpen2tei }

          config:
            platform: linux
            image_resource:
              type: docker-image
              source:
                repository: {{tools-image}}
                insecure_registries: [ {{insecure-registries}} ]

            inputs:
              - name: tpen-data
              - name: collatex-out
            outputs:
              - name: tpen-data-bumped

            run:
              path: sh
              args:
                - -exc
                - |
                  echo "push output of collatex (json) to github ..."

                  (cd tpen-data && git checkout master)
                  git clone tpen-data tpen-data-bumped
                  [ -d tpen-data-bumped/collation ] || mkdir tpen-data-bumped/collation/

                  cp -r collatex-out/*json tpen-data-bumped/collation

                  git config --global user.email "ci@dh.gesch.univie.ac.at"
                  git config --global user.name "moe-data/collate"

                  cd tpen-data-bumped/collation/
                  git add *json

                  GIT_STATUS=`git status`

                  if echo $GIT_STATUS | grep -q "Changes to be committed:" -;
                  then
                      git commit -m "add output of collatex" *json
                  fi


        - put: tpen-data-collate
          params: {repository: tpen-data-bumped}


        - task: task-collatex-to-webspace

          config:
            platform: linux
            image_resource:
              type: docker-image
              source:
                repository: {{tools-image}}
                insecure_registries: [ {{insecure-registries}} ]

            inputs:
              - name: ssh-keys
              - name: collatex-out-svg

            run:
              path: sh
              args:
                - -exc
                - |
                  echo "copy SVG files to webspace for easy access ..."

                  SSH_KEYS_DIR=ssh-keys
                  /bin/chmod 600 ${SSH_KEYS_DIR}/storage/ci-id_rsa

                  SCP="/usr/bin/scp \
                      -o StrictHostKeyChecking=no \
                      -i ${SSH_KEYS_DIR}/storage/ci-id_rsa"

                  $SCP -r collatex-out-svg/ ci@storage.stemmaweb.net:/home/ci/www/moe-data/

                  echo "SVG files copied to webspace, visit https://www.ci.stemmaweb.net/moe-data/"

    - name: feed-editions-moe-test
      plan:
        - aggregate:
          - get: tpen-data-collate
            trigger: true
            passed: [collate]
          - get: netrc-test-api

        - task: task-feed-editions-moe-test
          input_mapping: { tpen-data: tpen-data-collate }

          config:
            platform: linux
            image_resource:
              type: docker-image
              source:
                repository: {{tools-image}}
                insecure_registries: [ {{insecure-registries}} ]

            inputs:
              - name: tpen-data
              - name: netrc-test-api

            #
            # real string interpolation is possible starting with concourse 3.2.0 only
            # {{}} puts the inserted string in quotes
            # starting with 3.2.0 there is the alternative (()) which doesn't
            # therefore values mentioned in pipeline-config.yml.dist are not yet used here
            #
            run:
              path: sh
              args:
                - -exc
                - |
                  # create new user
                  API_URL="https://api.editions.byzantini.st/ChronicleMETest/stemmarest"

                  curl \
                      --silent \
                      --netrc-file netrc-test-api/dot-netrc-editions.byzantini.st \
                      --netrc \
                      --request PUT \
                      --header "Content-Type: application/json" \
                      --data '{ "role":"admin", "id":"alpha", "email":"alpha@dh.gesch", "passphrase":"user-passphrase" }' \
                  ${API_URL}/user/alpha

                  # new tradition
                  curl \
                      --silent \
                      --netrc-file netrc-test-api/dot-netrc-editions.byzantini.st \
                      --netrc \
                      --request POST \
                      --form "name=MatthewEdessa" \
                      --form "language=armenian" \
                      --form "public=no" \
                      --form "userId=alpha" \
                      --form "empty=no" \
                  ${API_URL}/tradition > create-tradition.response


                  TRADITION_ID=`jq ".tradId" create-tradition.response | sed s/\"//g`

                  SECTION_ID=''

                  # add milestones (sections) to the new tradition
                  for IN_FILE in tpen-data/collation/milestone-*.json
                  do
                      FILE_NAME=${IN_FILE##*/}  # strip directory
                      SECTION_NAME=${FILE_NAME%.*}      # strip file ext.

                      SECTION_ID_PREV=${SECTION_ID}
                      SECTION_ID=''

                      curl \
                          --silent \
                          --netrc-file netrc-test-api/dot-netrc-editions.byzantini.st \
                          --netrc \
                          --request POST \
                          --form "name=${SECTION_NAME}" \
                          --form "file=@${IN_FILE}" \
                          --form "filetype=cxjson" \
                      ${API_URL}/tradition/${TRADITION_ID}/section > create-section.response

                      cat create-section.response

                      SECTION_ID=`jq ".parentId" create-section.response | sed s/\"//g`
                  done


    - name: feed-editions-moe
      plan:
        - aggregate:
          - get: tpen-data-collate
            # passed: [create-editions-moe-stemmarest]
            passed: [collate]
          - get: netrc-test-api

        - task: task-feed-editions-moe
          input_mapping: { tpen-data: tpen-data-collate }

          config:
            platform: linux
            image_resource:
              type: docker-image
              source:
                repository: {{tools-image}}
                insecure_registries: [ {{insecure-registries}} ]

            inputs:
              - name: tpen-data
              - name: netrc-test-api

            #
            # real string interpolation is possible starting with concourse 3.2.0 only
            # {{}} puts the inserted string in quotes
            # starting with 3.2.0 there is the alternative (()) which doesn't
            # therefore values mentioned in pipeline-config.yml.dist are not yet used here
            #
            run:
              path: sh
              args:
                - -exc
                - |
                  # create new user
                  API_URL="https://api.editions.byzantini.st/ChronicleME/stemmarest"

                  curl \
                      --silent \
                      --netrc-file netrc-test-api/dot-netrc-editions.byzantini.st \
                      --netrc \
                      --request PUT \
                      --header "Content-Type: application/json" \
                      --data '{ "role":"admin", "id":"alpha", "email":"alpha@dh.gesch", "passphrase":"user-passphrase" }' \
                  ${API_URL}/user/alpha

                  # new tradition
                  curl \
                      --silent \
                      --netrc-file netrc-test-api/dot-netrc-editions.byzantini.st \
                      --netrc \
                      --request POST \
                      --form "name=MatthewEdessa" \
                      --form "language=armenian" \
                      --form "public=no" \
                      --form "userId=alpha" \
                      --form "empty=no" \
                  ${API_URL}/tradition > create-tradition.response


                  TRADITION_ID=`jq ".tradId" create-tradition.response | sed s/\"//g`

                  SECTION_ID=''

                  # add milestones (sections) to the new tradition
                  for IN_FILE in tpen-data/collation/milestone-*.json
                  do
                      FILE_NAME=${IN_FILE##*/}  # strip directory
                      SECTION_NAME=${FILE_NAME%.*}      # strip file ext.

                      SECTION_ID_PREV=${SECTION_ID}
                      SECTION_ID=''

                      curl \
                          --silent \
                          --netrc-file netrc-test-api/dot-netrc-editions.byzantini.st \
                          --netrc \
                          --request POST \
                          --form "name=${SECTION_NAME}" \
                          --form "file=@${IN_FILE}" \
                          --form "filetype=cxjson" \
                      ${API_URL}/tradition/${TRADITION_ID}/section > create-section.response

                      cat create-section.response

                      SECTION_ID=`jq ".parentId" create-section.response | sed s/\"//g`

                  done
